name: HENRY Platform CI/CD

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: '18.x'

jobs:
  # =====================================================
  # QUALITY CHECKS
  # =====================================================
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🔍 Run TypeScript Check
        run: npm run type-check
        continue-on-error: true
        
      - name: 🎨 Run Linter
        run: npm run lint:check
        continue-on-error: true
        
      - name: 📊 Run Tests
        run: npm test
        continue-on-error: true
        env:
          CI: true

  # =====================================================
  # BUILD
  # =====================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🔧 Create Environment File
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://dummy.supabase.co' }}" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'dummy_anon_key' }}" >> .env.local
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'dummy_service_key' }}" >> .env.local
          echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY || 'dummy_encryption_key_32_characters_long' }}" >> .env.local
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY || 'dummy_openai_key' }}" >> .env.local
          
      - name: 🏗️ Build Application
        run: npm run build
        env:
          CI: true
          NODE_ENV: production
        
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            public/
            package.json
            package-lock.json
            
  # =====================================================
  # SECURITY SCAN
  # =====================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🔐 Run Security Audit
        run: |
          echo "Running npm security audit..."
          npm audit --audit-level=moderate || echo "Security audit completed with warnings"
          
      - name: 🛡️ Check for High Severity Vulnerabilities
        run: |
          echo "Checking for high severity vulnerabilities..."
          npm audit --audit-level=high --json > audit-results.json || true
          if [ -s audit-results.json ]; then
            echo "Audit results found, analyzing..."
            cat audit-results.json
          else
            echo "No high severity vulnerabilities found"
          fi
        continue-on-error: true
            
      - name: 📤 Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            audit-results.json
            package-lock.json

  # =====================================================
  # DEPLOY TO VERCEL (Production)
  # =====================================================
  deploy-production:
    name: Deploy to Vercel (Production)
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Deployment to production completed successfully!'
            })

  # =====================================================
  # DEPLOY TO VERCEL (Preview)
  # =====================================================
  deploy-preview:
    name: Deploy to Vercel (Preview)
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔄 Deploy Preview to Vercel
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          
      - name: 💬 Comment Preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔗 Preview URL: ${{ steps.vercel-deploy.outputs.preview-url }}`
            })

  # =====================================================
  # DATABASE MIGRATION (Optional)
  # =====================================================
  database-migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🗄️ Run Database Migrations
        run: |
          echo "Running database migrations..."
          # Add your migration command here
          # npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        continue-on-error: true

  # =====================================================
  # NOTIFICATION
  # =====================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: 📧 Send Success Notification
        if: needs.deploy-production.result == 'success'
        run: |
          echo "Deployment successful! 🎉"
          # Add notification service integration here (Slack, Discord, etc.)
          
      - name: 🚨 Send Failure Notification
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "Deployment failed! ❌"
          # Add notification service integration here